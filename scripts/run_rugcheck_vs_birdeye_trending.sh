#!/bin/bash

# RugCheck vs Birdeye Trending Comparison Runner
# This script compares trending tokens from both APIs to analyze quality and overlap

echo "üî• RUGCHECK vs BIRDEYE TRENDING COMPARISON"
echo "==========================================="
echo ""
echo "This comparison will:"
echo "  ‚Ä¢ Fetch trending tokens from RugCheck /stats/trending (exactly 10 tokens)"
echo "  ‚Ä¢ Fetch trending tokens from Birdeye API (configurable limit)"
echo "  ‚Ä¢ Analyze overlap between the two sources"
echo "  ‚Ä¢ Compare token quality using RugCheck security analysis"
echo "  ‚Ä¢ Show which API provides better trending recommendations"
echo ""
echo "üìä Key Insights:"
echo "  ‚Ä¢ RugCheck: Fixed 10 tokens with inherent quality filtering"
echo "  ‚Ä¢ Birdeye: Larger selection based on volume/activity"
echo "  ‚Ä¢ Overlap: High-confidence tokens appearing in both sources"
echo "  ‚Ä¢ Quality: Safety rates and risk analysis for each source"
echo ""
echo "üîó Reference: https://api.rugcheck.xyz/swagger/index.html#/"
echo ""

# Check if virtual environment is activated
if [[ "$VIRTUAL_ENV" != "" ]]; then
    echo "‚úÖ Virtual environment detected: $(basename $VIRTUAL_ENV)"
else
    echo "‚ö†Ô∏è  Virtual environment not detected. Attempting to activate..."
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
        echo "‚úÖ Virtual environment activated"
    else
        echo "‚ùå Virtual environment not found. Please run 'python -m venv venv' first"
        exit 1
    fi
fi

echo ""
echo "üîß Starting trending comparison analysis..."
echo "‚è±Ô∏è  This may take 1-2 minutes depending on API response times"
echo ""

# Run the comparison
python scripts/test_rugcheck_vs_birdeye_trending_comparison.py

# Check exit code
if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Comparison completed successfully!"
    echo ""
    echo "üìä KEY FINDINGS:"
    echo "  ‚Ä¢ Review the overlap rate between RugCheck and Birdeye trending"
    echo "  ‚Ä¢ Check the quality comparison (safety rates)"
    echo "  ‚Ä¢ Note which API provides better filtering"
    echo "  ‚Ä¢ See high-confidence tokens (appearing in both sources)"
    echo ""
    echo "üéØ IMPLEMENTATION STRATEGY:"
    echo "  ‚Ä¢ Use both APIs as complementary sources"
    echo "  ‚Ä¢ Prioritize tokens appearing in both (high confidence)"
    echo "  ‚Ä¢ Leverage RugCheck's quality filtering (10 curated tokens)"
    echo "  ‚Ä¢ Use Birdeye for broader market coverage"
    echo ""
    echo "üí° INTEGRATION BENEFITS:"
    echo "  ‚Ä¢ Fixed 10-token dataset from RugCheck = predictable processing"
    echo "  ‚Ä¢ Perfect for real-time polling and batch processing"
    echo "  ‚Ä¢ Quality over quantity approach reduces false positives"
    echo "  ‚Ä¢ Overlap validation provides highest confidence signals"
    echo ""
    echo "üìÅ Results saved in scripts/results/ directory"
else
    echo ""
    echo "‚ùå Comparison failed with exit code $?"
    echo "üìã Check the error output above for details"
    echo ""
    echo "üîß Common issues:"
    echo "  ‚Ä¢ API rate limiting (wait and retry)"
    echo "  ‚Ä¢ Network connectivity issues"
    echo "  ‚Ä¢ Missing API credentials"
    echo "  ‚Ä¢ Configuration file issues"
fi

echo ""
echo "üîó More info:"
echo "  ‚Ä¢ RugCheck API: https://api.rugcheck.xyz/swagger/index.html#/"
echo "  ‚Ä¢ Enhanced RugCheck features: api/rugcheck_connector.py"
echo "  ‚Ä¢ Integration guide: docs/RUGCHECK_INTEGRATION_GUIDE.md" 