#!/usr/bin/env python3\n\"\"\"\n🔍 MORALIS INTEGRATION TEST - Stage 0 Early Gem Detector\nTest the integrated Moralis API in early_gem_detector.py\nVerify: bonding tokens, graduated tokens, rate limiting, pipeline integration\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nimport sys\nimport time\nfrom datetime import datetime\n\n# Add parent directory to path\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\n\n# Import the integrated detector\nfrom scripts.early_gem_detector import EarlyGemDetector\n\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\nasync def test_moralis_integration():\n    \"\"\"\n    🧪 Test Moralis API integration in Early Gem Detector\n    \"\"\"\n    \n    print(\"🧪 MORALIS INTEGRATION TEST - Early Gem Detector\")\n    print(\"=\" * 60)\n    print(\"   🔍 Testing Stage 0 discovery with Moralis API\")\n    print(\"   🌊 Bonding tokens + 🎓 Graduated tokens\")\n    print(\"   📊 Rate limiting (40,000 CU/day)\")\n    print(\"   🚀 Pipeline integration\")\n    print()\n    \n    # Check environment variables\n    moralis_key = os.getenv('MORALIS_API_KEY')\n    if not moralis_key:\n        print(\"❌ MORALIS_API_KEY environment variable not set\")\n        print(\"   Please set: export MORALIS_API_KEY='your-api-key'\")\n        return\n    \n    print(f\"✅ Moralis API Key: {'*' * 20}{moralis_key[-10:]}\")\n    print()\n    \n    try:\n        # Initialize the detector with debug mode\n        print(\"🚀 Initializing Early Gem Detector with Moralis integration...\")\n        detector = EarlyGemDetector(debug_mode=True)\n        \n        if not detector.moralis_api:\n            print(\"❌ Moralis API not initialized in detector\")\n            return\n        \n        print(\"✅ Early Gem Detector initialized with Moralis API\")\n        print()\n        \n        # Test 1: Check CU usage stats\n        print(\"📊 TEST 1: CU Usage Tracking\")\n        print(\"-\" * 30)\n        \n        async with detector.moralis_api:\n            cu_stats = detector.moralis_api.get_cu_usage_stats()\n            print(f\"   📅 Date: {cu_stats['date']}\")\n            print(f\"   💰 Used CU: {cu_stats['used_cu']}/{cu_stats['daily_limit']}\")\n            print(f\"   📊 Usage: {cu_stats['usage_percentage']:.1f}%\")\n            print(f\"   🚦 Status: {cu_stats['rate_limit_status']}\")\n            print(f\"   📞 Requests Today: {cu_stats['requests_today']}\")\n            print()\n            \n            # Test 2: Bonding Tokens Discovery\n            print(\"🌊 TEST 2: Bonding Tokens Discovery\")\n            print(\"-\" * 35)\n            \n            bonding_start = time.time()\n            bonding_tokens = await detector.moralis_api.get_bonding_tokens_by_exchange(\n                exchange=\"pumpfun\",\n                limit=10  # Small test limit\n            )\n            bonding_time = time.time() - bonding_start\n            \n            if bonding_tokens:\n                print(f\"   ✅ Found {len(bonding_tokens)} bonding tokens ({bonding_time:.2f}s)\")\n                \n                # Show sample bonding token\n                sample = bonding_tokens[0]\n                print(f\"   📋 Sample Token:\")\n                print(f\"      Symbol: {sample.get('symbol', 'Unknown')}\")\n                print(f\"      Name: {sample.get('name', 'Unknown')}\")\n                print(f\"      Market Cap: ${sample.get('market_cap', 0):,.0f}\")\n                print(f\"      Bonding Progress: {sample.get('bonding_curve_progress', 0):.1f}%\")\n                print(f\"      Price USD: ${sample.get('price_usd', 0):.6f}\")\n                print(f\"      Liquidity: ${sample.get('liquidity', 0):,.0f}\")\n            else:\n                print(\"   ⚠️ No bonding tokens found\")\n            print()\n            \n            # Test 3: Graduated Tokens Discovery\n            print(\"🎓 TEST 3: Graduated Tokens Discovery\")\n            print(\"-\" * 37)\n            \n            graduated_start = time.time()\n            graduated_tokens = await detector.moralis_api.get_graduated_tokens_by_exchange(\n                exchange=\"pumpfun\",\n                limit=10  # Small test limit\n            )\n            graduated_time = time.time() - graduated_start\n            \n            if graduated_tokens:\n                print(f\"   ✅ Found {len(graduated_tokens)} graduated tokens ({graduated_time:.2f}s)\")\n                \n                # Show sample graduated token\n                sample = graduated_tokens[0]\n                print(f\"   📋 Sample Graduated Token:\")\n                print(f\"      Symbol: {sample.get('symbol', 'Unknown')}\")\n                print(f\"      Name: {sample.get('name', 'Unknown')}\")\n                print(f\"      Market Cap: ${sample.get('market_cap', 0):,.0f}\")\n                print(f\"      Graduated At: {sample.get('graduated_at', 'Unknown')}\")\n                print(f\"      Hours Since Grad: {sample.get('hours_since_graduation', 999):.1f}\")\n                print(f\"      Fresh Graduate: {sample.get('is_fresh_graduate', False)}\")\n                print(f\"      Price USD: ${sample.get('price_usd', 0):.6f}\")\n                print(f\"      Liquidity: ${sample.get('liquidity', 0):,.0f}\")\n            else:\n                print(\"   ⚠️ No graduated tokens found\")\n            print()\n            \n            # Test 4: Updated CU Usage\n            print(\"💰 TEST 4: Updated CU Usage After Requests\")\n            print(\"-\" * 40)\n            \n            updated_cu_stats = detector.moralis_api.get_cu_usage_stats()\n            cu_used = updated_cu_stats['used_cu'] - cu_stats['used_cu']\n            \n            print(f\"   🔥 CU Used This Test: {cu_used}\")\n            print(f\"   📊 Total Used: {updated_cu_stats['used_cu']}/{updated_cu_stats['daily_limit']}\")\n            print(f\"   📈 Usage: {updated_cu_stats['usage_percentage']:.1f}%\")\n            print(f\"   🚦 Status: {updated_cu_stats['rate_limit_status']}\")\n            print(f\"   🌊 Bonding Requests: {updated_cu_stats['bonding_requests']}\")\n            print(f\"   🎓 Graduated Requests: {updated_cu_stats['graduated_requests']}\")\n            print()\n        \n        # Test 5: Full Pipeline Integration\n        print(\"🚀 TEST 5: Full Pipeline Integration\")\n        print(\"-\" * 35)\n        \n        pipeline_start = time.time()\n        \n        # Run discovery only (not full detection cycle to avoid alerts)\n        candidates = await detector.discover_early_tokens()\n        \n        pipeline_time = time.time() - pipeline_start\n        \n        moralis_candidates = [\n            c for c in candidates \n            if c.get('source', '').startswith('moralis_')\n        ]\n        \n        print(f\"   ✅ Pipeline completed ({pipeline_time:.2f}s)\")\n        print(f\"   📊 Total Candidates: {len(candidates)}\")\n        print(f\"   🔍 Moralis Candidates: {len(moralis_candidates)}\")\n        \n        if moralis_candidates:\n            print(f\"   📋 Moralis Sources:\")\n            sources = {}\n            for candidate in moralis_candidates:\n                source = candidate.get('source', 'unknown')\n                sources[source] = sources.get(source, 0) + 1\n            \n            for source, count in sources.items():\n                print(f\"      {source}: {count} tokens\")\n                \n            # Show sample pipeline candidate\n            sample = moralis_candidates[0]\n            print(f\"   📋 Sample Pipeline Candidate:\")\n            print(f\"      Symbol: {sample.get('symbol', 'Unknown')}\")\n            print(f\"      Source: {sample.get('source', 'Unknown')}\")\n            print(f\"      Market Cap: ${sample.get('market_cap', 0):,.0f}\")\n            print(f\"      Stage: {sample.get('moralis_stage', 'Unknown')}\")\n            print(f\"      Detection Boost: +{sample.get('moralis_priority_boost', 0)} pts\")\n        print()\n        \n        # Test Summary\n        print(\"📊 TEST SUMMARY\")\n        print(\"=\" * 15)\n        print(f\"   ✅ Moralis API Integration: WORKING\")\n        print(f\"   🌊 Bonding Tokens: {len(bonding_tokens) if bonding_tokens else 0} found\")\n        print(f\"   🎓 Graduated Tokens: {len(graduated_tokens) if graduated_tokens else 0} found\")\n        print(f\"   🚀 Pipeline Integration: {len(moralis_candidates)} candidates\")\n        print(f\"   💰 Total CU Used: {updated_cu_stats['used_cu']}\")\n        print(f\"   🚦 Rate Limit Status: {updated_cu_stats['rate_limit_status']}\")\n        print()\n        print(\"✅ ALL TESTS PASSED - Moralis integration is working!\")\n        \n        # Cleanup\n        await detector.cleanup()\n        \n    except Exception as e:\n        logger.error(f\"Test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n\nif __name__ == \"__main__\":\n    asyncio.run(test_moralis_integration())\n 